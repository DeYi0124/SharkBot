import consts from '../consts.js';

/**
 * This class implements match endpoints of the LoL API <https://developer.riotgames.com/api-methods/#match-v3>
 * @author Filip Butkiewicz aka. bagnz0r <http://github.com/bagnz0r>
 */
class Match {

    constructor(apiKey, region) {
        this.headers = new Headers({
            'X-Riot-Token': apiKey
        });

        this.url = `https://${consts.zone[region]}/lol/match/v3`;
    }

    /**
     * Get match by match ID.
     * @param {Number} matchId
     * @return {Promise}
     */
    getMatchById(matchId) {
        return fetch(`${this.url}/matches/${matchId}`, { headers: this.headers });
    }

    /**
     * Get matchlist for ranked games played on given account ID and platform ID and filtered using given filter parameters, if any.
     * @param {Number} accountId
     * @param {Object} filters Please refer to <https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchlist> for information about available filters.
     * @return {Promise}
     */
    getMatchlistByAccountId(accountId, filters = {}) {
        const queryString = Object.keys(filters)
            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(filters[key])}`)
            .join('&');

        return fetch(`${this.url}/matchlists/by-account/${accountId}/?${queryString}`, { headers: this.headers });
    }

    /**
     * Get matchlist for last 20 matches played on given account ID and platform ID.
     * @param {Number} accountId
     * @return {Promise}
     */
    getRecentMatchlistByAccountId(accountId) {
        return fetch(`${this.url}/matchlists/by-account/${accountId}/recent`, { headers: this.headers });
    }

    /**
     * Get match timeline by match ID.
     * @param {Number} matchId
     * @return {Promise}
     */
    getMatchTimelineByMatchId(matchId) {
        return fetch(`${this.url}/timelines/by-match/${matchId}`, { headers: this.headers });
    }

    /**
     * Get match IDs by tournament code.
     * @param {String} tournamentCode 
     */
    getMatchIdsByTournamentCode(tournamentCode) {
        return fetch(`${this.url}/matches/by-tournament-code/${tournamentCode}/ids`, { headers: this.headers });
    }

    /**
     * Get match by match ID and tournament code
     * @param {Number} matchId 
     * @param {String} tournamentCode 
     */
    getMatchByIdAndTournamentCode(matchId, tournamentCode) {
        return fetch(`${this.url}/matches/${matchId}/by-tournament-code/${tournamentCode}`, { headers: this.headers });
    }
    
}

export default Match;
