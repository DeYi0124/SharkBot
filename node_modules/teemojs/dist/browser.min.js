!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).TeemoJS=t()}}(function(){var t={};return function(e){"use strict";const a=e.URL||require("url").URL,r=e.fetch||require("node-fetch");function i(t,e){let a=0;return t.replace(/\{(\w*)\}/g,(r,i)=>{const n=i in e?e[i]:e[a];if(void 0===n)throw new Error(`argObject provided for format "${t}" missing key ["${i}"] or index [${a}].`);return a++,n})}var n=this&&this.__awaiter||function(t,e,a,r){return new(a||(a=Promise))(function(i,n){function o(t){try{u(r.next(t))}catch(e){n(e)}}function s(t){try{u(r.throw(t))}catch(e){n(e)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof a?e:new a(function(t){t(e)})).then(o,s)}u((r=r.apply(t,e||[])).next())})};class o{constructor(t){this._config=t,this._appLimit=new s(this._config.rateLimitTypeApplication,1,this._config),this._methodLimits={},this._concurrentSema=new h(this._config.maxConcurrent)}req(t,e,a){const i=[this._appLimit];return this._config.rateLimitTypeMethod&&i.push(this._getMethodLimit(t)),(()=>n(this,void 0,void 0,function*(){let t,n=0;for(;n<this._config.retries;n++){yield this._concurrentSema.acquire();try{let n;for(;0<=(n=s.getAllOrDelay(i));)yield new Promise(t=>setTimeout(t,n));if(t=yield r(e,a),i.forEach(e=>e.onResponse(t)),[204,404,422].includes(t.status))return null;if(t.ok)return t.json();if(429===t.status||t.status>=500)continue}finally{this._concurrentSema.release()}}const o=new Error(`Request failed after ${n} retries with code ${t&&t.status}. `+"The 'response' field of this Error contains the failed Response for debugging or error handling.");throw o.response=t,o}))()}updateDistFactor(){this._appLimit.setDistFactor(this._config.distFactor),Object.values(this._methodLimits).forEach(t=>t.setDistFactor(this._config.distFactor))}_getMethodLimit(t){return this._methodLimits[t]||(this._methodLimits[t]=new s(this._config.rateLimitTypeMethod,1,this._config))}}class s{constructor(t,e,a){this._config=a,this._type=t,this._buckets=this._config.defaultBuckets.map(t=>new m(t.timespan,t.limit,t)),this._retryAfter=0,this._distFactor=e}static getAllOrDelay(t){const e=t.map(t=>t.retryDelay()).reduce((t,e,a,r)=>Math.max(t,e),-1);if(0<=e)return e;const a=[].concat(...t.map(t=>t._buckets));return m.getAllOrDelay(a)}retryDelay(){const t=Date.now();return t>this._retryAfter?-1:this._retryAfter-t}onResponse(t){if(429===t.status){const e=t.headers.get(this._config.headerLimitType);if(!e)throw new Error("Response missing type.");if(this._type.name===e.toLowerCase()){const e=Number(t.headers.get(this._config.headerRetryAfter));if(Number.isNaN(e))throw new Error("Response 429 missing retry-after header.");this._retryAfter=Date.now()+1e3*e+500}}const e=t.headers.get(this._type.headerLimit),a=t.headers.get(this._type.headerCount);e&&a&&this._bucketsNeedUpdate(e)&&(this._buckets=this._getBucketsFromHeaders(e,a,this._config.bucketsConfig))}setDistFactor(t){this._distFactor=t,this._buckets.forEach(e=>e.setDistFactor(t))}_bucketsNeedUpdate(t){return t!==this._buckets.map(t=>t.toLimitString()).join(",")}_getBucketsFromHeaders(t,e,a={}){const r=t.split(","),i=e.split(",");if(r.length!==i.length)throw new Error(`Limit and count headers do not match: ${t}, ${e}.`);return r.map((t,e)=>{const r=i[e],[n,o]=t.split(":").map(Number),[s,u]=r.split(":").map(Number);if(o!==u)throw new Error(`Limit span and count span do not match: ${o}, ${u}.`);const h=new m(1e3*o,n,Object.assign({distFactor:this._distFactor},a));return h.getTokens(s),h})}}const u={distFactor:1,bins:20,binFactor:.95,overhead:20};class m{constructor(t,e,a={},r=Date.now){const{distFactor:i,bins:n,binFactor:o,overhead:s}=Object.assign(Object.assign({},u),a);if(o<=0||1<o)throw new Error(`binFactor ${o} must be in range (0, 1].`);this._now=r,this._givenTimespan=t,this._givenLimit=e,this._binFactor=o,this._timespan=t+s,this._binTimespan=Math.ceil(this._timespan/n),this._total=0,this._time=-1,this._buffer=new Array(n+1).fill(0),this.setDistFactor(i)}static getAllOrDelay(t){const e=t.map(t=>t.getDelay()).reduce((t,e)=>Math.max(t,e),-1);return e>=0?e:(t.forEach(t=>t.getTokens(1)),-1)}setDistFactor(t){this._limit=this._givenLimit*t,this._binLimit=Math.max(1,Math.floor(this._limit*this._binFactor))}getDelay(){const t=this._update();if(this._limit>this._total)return this._binLimit<=this._buffer[t]?this._getTimeToBucket(1):-1;let e=1;for(;this._buffer.length>e&&!(0<this._buffer[(t+e)%this._buffer.length]);e++);return this._getTimeToBucket(e)}getTokens(t){const e=this._update();return this._buffer[e]+=t,this._total+=t,this._total<=this._limit&&this._buffer[e]<=this._binLimit}toLimitString(){return`${this._givenLimit}:${this._givenTimespan/1e3}`}_update(){if(0>this._time)return this._time=this._now(),this._getIndex(this._time);let t=this._getIndex(this._time);const e=this._getLength(this._time,this._time=this._now());if(0>e)throw new Error("Negative length.");if(0===e)return t;if(this._buffer.length<=e)return this._buffer.fill(0),this._total=0,t;for(let a=0;e>a;a++)t++,t%=this._buffer.length,this._total-=this._buffer[t],this._buffer[t]=0;if(this._getIndex(this._time)!==t)throw new Error(`Get index time wrong: ${this._getIndex(this._time)}, ${t}.`);return t}_getIndex(t){return Math.floor(t/this._binTimespan%this._buffer.length)}_getLength(t,e){return Math.floor(e/this._binTimespan)-Math.floor(t/this._binTimespan)}_getTimeToBucket(t){return t*this._binTimespan-this._time%this._binTimespan}}class h{constructor(t){this._permits=t,this._queue=[]}acquire(){return new Promise(t=>{this._permits?(this._permits--,t()):this._queue.push(t)})}release(){const t=this._queue.shift();t?t():this._permits++}}class c{constructor(t){this.config=t,this._requesters={}}static createRiotApi(t,e=1){const a="string"==typeof t?{default:t}:t;if(!a.default)throw Error('apiKey argument to createRiotApi missing "default" key.');if(e<=0||1<e)throw Error(`Invalid distFactor: ${e}, must be in range (0, 1].`);return new c(Object.assign(Object.assign({},f),{distFactor:e,apiKeys:a}))}proxy(){return new Proxy(this,{get:(t,e,a)=>e in t.config.endpoints?new Proxy({base:t,endpoint:e},{get(t,e,a){if(e in t.base.config.endpoints[t.endpoint])return(a,r)=>t.base.req(t.endpoint,e,a,r)}}):"base"===e?t:void 0})}req(t,e,r,n){let o,s;if(n=n||{},"object"!=typeof(o=this.config.endpoints[t]))throw Error(`Unknown endpoint "${t}".\nAvailable endpoints: ${JSON.stringify(Object.keys(this.config.endpoints))}`);if("string"!=typeof(s=o[e]).path)throw Error(`Unknown method "${e}" in endpoint "${t}".\nAvailable methods: ${JSON.stringify(Object.keys(o))}`);const u="number"==typeof r?g[r]:r,m=s.apiKeyName&&this.config.apiKeys[s.apiKeyName]||this.config.apiKeys.default;if(!m)throw Error(`No valid API key found for name ${JSON.stringify(s.apiKeyName)} or "default".`);const h=n.path?i(s.path,n.path):s.path,c=new a(h,i(this.config.origin,[u]));n.query&&Object.entries(n.query).forEach(([t,e])=>{Array.isArray(e)?e.forEach(e=>c.searchParams.append(t,e)):c.searchParams.set(t,e)});const l={"x-riot-token":m},p={method:s.method,headers:l};n.body&&(p.body=JSON.stringify(n.body),l["Content-Type"]="application/json");const d=`${f=m,Array.from(f).reduce((t,e)=>0|31*t+e.charCodeAt(0),0)}:${u}`;var f;const y=`${t}:${e}`;return this.reqInternal(d,y,c.href,p)}reqInternal(t,e,a,r){return(this._requesters[t]||(this._requesters[t]=new o(this.config))).req(e,a,r)}setDistFactor(t){if(t<=0||1<t)throw new Error("Factor must be greater than zero and non-greater than one.");this.config.distFactor!==t&&(this.config.distFactor=t,Object.values(this._requesters).forEach(t=>t.updateDistFactor()))}}var l,p,d;t.TeemoApi=c,function(t){t[t.AMERICAS=1]="AMERICAS",t[t.ASIA=2]="ASIA",t[t.EUROPE=3]="EUROPE",t[t.SEA=4]="SEA",t[t.ESPORTS=10]="ESPORTS"}(l||(l={})),function(t){t[t.BR1=16]="BR1",t[t.EUN1=17]="EUN1",t[t.EUW1=18]="EUW1",t[t.JP1=19]="JP1",t[t.KR=20]="KR",t[t.LA1=21]="LA1",t[t.LA2=22]="LA2",t[t.NA1=23]="NA1",t[t.OC1=24]="OC1",t[t.RU=25]="RU",t[t.TR1=26]="TR1",t[t.PBE1=31]="PBE1"}(p||(p={})),function(t){t[t.AP=64]="AP",t[t.BR=65]="BR",t[t.EU=66]="EU",t[t.LATAM=68]="LATAM",t[t.NA=69]="NA",t[t.KR=70]="KR",t[t.ESPORTS=95]="ESPORTS"}(d||(d={}));const g=Object.assign(Object.assign(Object.assign({},l),p),d);!function(t){t.parse=function(e,a=!1){switch(e.slice(0,2).toUpperCase()){case"AM":return t.AMERICAS;case"AS":return t.ASIA;case"EU":return t.EUROPE;case"SE":if(!a)return t.SEA}throw new Error(`Failed to parse string as RegionalRoute: "${e}" (exclude SEA: ${a}).`)}}(l||(l={})),function(t){const e={[t.BR1]:l.AMERICAS,[t.EUN1]:l.EUROPE,[t.EUW1]:l.EUROPE,[t.JP1]:l.ASIA,[t.KR]:l.ASIA,[t.LA1]:l.AMERICAS,[t.LA2]:l.AMERICAS,[t.NA1]:l.AMERICAS,[t.OC1]:l.AMERICAS,[t.TR1]:l.EUROPE,[t.RU]:l.EUROPE,[t.PBE1]:l.AMERICAS};t.toRegional=function(t){return e[t]},t.parse=function(e){switch(e.slice(0,2).toUpperCase()){case"BR":return t.BR1;case"JP":return t.JP1;case"KR":return t.KR;case"NA":return t.NA1;case"OC":return t.OC1;case"TR":return t.TR1;case"RU":return t.RU}switch(e.slice(0,3).toUpperCase()){case"EUN":case"EUW":return t.EUN1;case"LAN":case"LA1":return t.LA1;case"LAS":case"LA2":return t.LA2}throw new Error(`Failed to parse string as PlatformRoute: "${e}".`)}}(p||(p={})),function(t){t.parse=function(e){switch(e.slice(0,2).toUpperCase()){case"AP":return t.AP;case"BR":return t.BR;case"EU":return t.EU;case"KR":return t.KR;case"LA":return t.LATAM;case"NA":return t.NA}throw new Error(`Failed to parse string as ValPlatformRoute: "${e}".`)}}(d||(d={})),Object.assign(t,{RegionalRoute:l,PlatformRoute:p,ValPlatformRoute:d,AnyRoute:g});const f={apiKeys:{default:null},distFactor:1,retries:3,origin:"https://{}.api.riotgames.com",defaultBuckets:[{timespan:1e3,limit:1,bins:1,binFactor:1,overhead:0}],rateLimitTypeApplication:{name:"application",headerLimit:"x-app-rate-limit",headerCount:"x-app-rate-limit-count"},rateLimitTypeMethod:{name:"method",headerLimit:"x-method-rate-limit",headerCount:"x-method-rate-limit-count"},maxConcurrent:500,headerLimitType:"x-rate-limit-type",headerRetryAfter:"retry-after",bucketsConfig:{},endpoints:{accountV1:{getByPuuid:{path:"/riot/account/v1/accounts/by-puuid/{puuid}"},getByRiotId:{path:"/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}"},getByAccessToken:{path:"/riot/account/v1/accounts/me"},getActiveShard:{path:"/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}"}},championMasteryV4:{getAllChampionMasteries:{path:"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}"},getChampionMastery:{path:"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}"},getChampionMasteryScore:{path:"/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}"}},championV3:{getChampionInfo:{path:"/lol/platform/v3/champion-rotations"}},clashV1:{getPlayersBySummoner:{path:"/lol/clash/v1/players/by-summoner/{summonerId}"},getTeamById:{path:"/lol/clash/v1/teams/{teamId}"},getTournaments:{path:"/lol/clash/v1/tournaments"},getTournamentByTeam:{path:"/lol/clash/v1/tournaments/by-team/{teamId}"},getTournamentById:{path:"/lol/clash/v1/tournaments/{tournamentId}"}},leagueExpV4:{getLeagueEntries:{path:"/lol/league-exp/v4/entries/{queue}/{tier}/{division}"}},leagueV4:{getChallengerLeague:{path:"/lol/league/v4/challengerleagues/by-queue/{queue}"},getLeagueEntriesForSummoner:{path:"/lol/league/v4/entries/by-summoner/{encryptedSummonerId}"},getLeagueEntries:{path:"/lol/league/v4/entries/{queue}/{tier}/{division}"},getGrandmasterLeague:{path:"/lol/league/v4/grandmasterleagues/by-queue/{queue}"},getLeagueById:{path:"/lol/league/v4/leagues/{leagueId}"},getMasterLeague:{path:"/lol/league/v4/masterleagues/by-queue/{queue}"}},lolStatusV3:{getShardData:{path:"/lol/status/v3/shard-data"}},lolStatusV4:{getPlatformData:{path:"/lol/status/v4/platform-data"}},lorDeckV1:{getDecks:{path:"/lor/deck/v1/decks/me",apiKeyName:"lor"},createDeck:{path:"/lor/deck/v1/decks/me",method:"post",apiKeyName:"lor"}},lorInventoryV1:{getCards:{path:"/lor/inventory/v1/cards/me",apiKeyName:"lor"}},lorMatchV1:{getMatchIdsByPUUID:{path:"/lor/match/v1/matches/by-puuid/{puuid}/ids",apiKeyName:"lor"},getMatch:{path:"/lor/match/v1/matches/{matchId}",apiKeyName:"lor"}},lorRankedV1:{getLeaderboards:{path:"/lor/ranked/v1/leaderboards",apiKeyName:"lor"}},lorStatusV1:{getPlatformData:{path:"/lor/status/v1/platform-data",apiKeyName:"lor"}},matchV5:{getMatchIdsByPUUID:{path:"/lol/match/v5/matches/by-puuid/{puuid}/ids"},getMatch:{path:"/lol/match/v5/matches/{matchId}"},getTimeline:{path:"/lol/match/v5/matches/{matchId}/timeline"}},spectatorV4:{getCurrentGameInfoBySummoner:{path:"/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}"},getFeaturedGames:{path:"/lol/spectator/v4/featured-games"}},summonerV4:{getByAccountId:{path:"/lol/summoner/v4/summoners/by-account/{encryptedAccountId}"},getBySummonerName:{path:"/lol/summoner/v4/summoners/by-name/{summonerName}"},getByPUUID:{path:"/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}"},getByAccessToken:{path:"/lol/summoner/v4/summoners/me"},getBySummonerId:{path:"/lol/summoner/v4/summoners/{encryptedSummonerId}"}},tftLeagueV1:{getChallengerLeague:{path:"/tft/league/v1/challenger",apiKeyName:"tft"},getLeagueEntriesForSummoner:{path:"/tft/league/v1/entries/by-summoner/{summonerId}",apiKeyName:"tft"},getLeagueEntries:{path:"/tft/league/v1/entries/{tier}/{division}",apiKeyName:"tft"},getGrandmasterLeague:{path:"/tft/league/v1/grandmaster",apiKeyName:"tft"},getLeagueById:{path:"/tft/league/v1/leagues/{leagueId}",apiKeyName:"tft"},getMasterLeague:{path:"/tft/league/v1/master",apiKeyName:"tft"},getTopRatedLadder:{path:"/tft/league/v1/rated-ladders/{queue}/top",apiKeyName:"tft"}},tftMatchV1:{getMatchIdsByPUUID:{path:"/tft/match/v1/matches/by-puuid/{puuid}/ids",apiKeyName:"tft"},getMatch:{path:"/tft/match/v1/matches/{matchId}",apiKeyName:"tft"}},tftSummonerV1:{getByAccountId:{path:"/tft/summoner/v1/summoners/by-account/{encryptedAccountId}",apiKeyName:"tft"},getBySummonerName:{path:"/tft/summoner/v1/summoners/by-name/{summonerName}",apiKeyName:"tft"},getByPUUID:{path:"/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}",apiKeyName:"tft"},getByAccessToken:{path:"/tft/summoner/v1/summoners/me",apiKeyName:"tft"},getBySummonerId:{path:"/tft/summoner/v1/summoners/{encryptedSummonerId}",apiKeyName:"tft"}},thirdPartyCodeV4:{getThirdPartyCodeBySummonerId:{path:"/lol/platform/v4/third-party-code/by-summoner/{encryptedSummonerId}"}},tournamentStubV4:{createTournamentCode:{path:"/lol/tournament-stub/v4/codes",method:"post",apiKeyName:"tournament"},getLobbyEventsByCode:{path:"/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}",apiKeyName:"tournament"},registerProviderData:{path:"/lol/tournament-stub/v4/providers",method:"post",apiKeyName:"tournament"},registerTournament:{path:"/lol/tournament-stub/v4/tournaments",method:"post",apiKeyName:"tournament"}},tournamentV4:{createTournamentCode:{path:"/lol/tournament/v4/codes",method:"post",apiKeyName:"tournament"},getTournamentCode:{path:"/lol/tournament/v4/codes/{tournamentCode}",apiKeyName:"tournament"},updateCode:{path:"/lol/tournament/v4/codes/{tournamentCode}",method:"put",apiKeyName:"tournament"},getLobbyEventsByCode:{path:"/lol/tournament/v4/lobby-events/by-code/{tournamentCode}",apiKeyName:"tournament"},registerProviderData:{path:"/lol/tournament/v4/providers",method:"post",apiKeyName:"tournament"},registerTournament:{path:"/lol/tournament/v4/tournaments",method:"post",apiKeyName:"tournament"}},valContentV1:{getContent:{path:"/val/content/v1/contents"}},valMatchV1:{getMatch:{path:"/val/match/v1/matches/{matchId}"},getMatchlist:{path:"/val/match/v1/matchlists/by-puuid/{puuid}"},getRecent:{path:"/val/match/v1/recent-matches/by-queue/{queue}"}},valRankedV1:{getLeaderboard:{path:"/val/ranked/v1/leaderboards/by-act/{actId}"}},valStatusV1:{getPlatformData:{path:"/val/status/v1/platform-data"}}}};Object.assign(t,{RiotApiConfig:f})}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{}),t});